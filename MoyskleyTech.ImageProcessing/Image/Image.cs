using MoyskleyTech.Mathematics.Tools;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace MoyskleyTech.ImageProcessing.Image
{
   

    public static class Image
    {
        public static Dictionary<Type , Func<Func<int,int,object>,Size,double , double , object>> GetFunctions = new Dictionary<Type, Func<Func<int,int,object>,Size,double, double, object>>();
        public static Dictionary<Type , Func<Func<int,int,object>,double,double, double , double , object>> AverageFunctions = new Dictionary<Type, Func<Func<int,int,object>,double, double,double, double, object>>();

        public static Func<Func<int , int , T> , Size , double , double , T> GetGetterFunction<T>()
            where T : unmanaged
        {
            var t = typeof(T);
            if ( !GetFunctions.ContainsKey(t) )
                RegisterGetFunction<T>(Get);
            return (g , s , x , y) => ( T ) GetFunctions[t]((x2 , y2) => g(x2 , y2) , s , x , y);
        }
        public static Func<Func<int , int , T> , double , double , double , double , T> GetAverageFunction<T>()
            where T : unmanaged
        {
            var t = typeof(T);
            if ( !AverageFunctions.ContainsKey(t) )
                RegisterAverageFunction<T>(Average);
            return (g , x , y , z , w) => ( T ) AverageFunctions[t]((x2 , y2) => g(x2 , y2) , x , y , z , w);
        }
        public static void RegisterGetFunction<T>(Func<Func<int , int , T> , Size , double , double , T> func)
            where T : unmanaged
        {
            var t = typeof(T);
            GetFunctions[t] = (g , s , x , y) => func((x2 , y2) => ( T ) g(x2 , y2) , s , x , y);
        }
        public static void RegisterAverageFunction<T>(Func<Func<int , int , T> , double , double , double , double , T> func)
            where T : unmanaged
        {
            var t = typeof(T);
            AverageFunctions[t] = (g , x , y , z , w) => func((x2 , y2) => ( T ) g(x2 , y2) , x , y , z , w);
        }

        static Image()
        {
            RegisterGetFunction<ARGB_16bit>(Get);
            RegisterGetFunction<ARGB_Float>(Get);
            RegisterGetFunction<float>(Get);
            RegisterAverageFunction<ARGB_16bit>(Average);
            RegisterAverageFunction<ARGB_Float>(Average);
            RegisterAverageFunction<float>(Average);
            RegisterAverageFunction<bool>(Average);

            //Autogenerated
            RegisterGetFunction<BGR>(Get);
            RegisterGetFunction<BGRA>(Get);
            RegisterGetFunction<RGB>(Get);
            RegisterGetFunction<RGBA>(Get);
            RegisterGetFunction<ABGR>(Get);
            RegisterGetFunction<ARGB>(Get);

            RegisterGetFunction<_1555>(Get);
            RegisterGetFunction<_332>(Get);
            RegisterGetFunction<_555>(Get);
            RegisterGetFunction<_565>(Get);

            RegisterGetFunction<HSB>(Get);
            RegisterGetFunction<HSL>(Get);
            RegisterGetFunction<HSBA>(Get);
            RegisterGetFunction<HSB_Float>(Get);
            RegisterGetFunction<CYMK>(Get);

            RegisterAverageFunction<BGR>(Average);
            RegisterAverageFunction<BGRA>(Average);
            RegisterAverageFunction<RGB>(Average);
            RegisterAverageFunction<RGBA>(Average);
            RegisterAverageFunction<ABGR>(Average);
            RegisterAverageFunction<ARGB>(Average);

            RegisterAverageFunction<_1555>(Average);
            RegisterAverageFunction<_332>(Average);
            RegisterAverageFunction<_555>(Average);
            RegisterAverageFunction<_565>(Average);

            RegisterAverageFunction<HSB>(Average);
            RegisterAverageFunction<HSL>(Average);
            RegisterAverageFunction<HSBA>(Average);
            RegisterAverageFunction<HSB_Float>(Average);
            RegisterAverageFunction<CYMK>(Average);
        }
        public static ARGB_16bit Get(Func<int , int , ARGB_16bit> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.A;
                arr[1]=px.R;
                arr[2]=px.G;
                arr[3]=px.B;
            } ,4,x,y);
            return new ARGB_16bit() { A = ( ushort ) vs[0] , R = ( ushort ) vs[1] , G = ( ushort ) vs[2] , B = ( ushort ) vs[3] };
        }
        public static ARGB_16bit Average(Func<int , int , ARGB_16bit> getter , double x , double y , double w , double h)
        {
            var sex = x+w;
            var sey = y+w;
            var sx = (int)x;
            var sy = (int)y;

            ulong count=0;
            ulong acount=0;
            ulong sa=0,sr=0,sg=0,sb=0;
            for ( var i = sx; i < sex; i++ )
            {
                for ( var j = sy; j < sey; j++ )
                {
                    count++;
                    ARGB_16bit source = getter(i,j);
                    acount += source.A;
                    sa += source.A;
                    sr += source.R;
                    sg += source.G;
                    sb += source.B;
                }
            }
            ARGB_16bit destinationpx = new ARGB_16bit
            {
                A = ( ushort ) ( sa / count )
            };
            if ( acount > 0 )
            {
                destinationpx.R = ( ushort ) ( sr * ushort.MaxValue / acount );
                destinationpx.G = ( ushort ) ( sg * ushort.MaxValue / acount );
                destinationpx.B = ( ushort ) ( sb * ushort.MaxValue / acount );
            }
            return destinationpx;
        }
        public static ARGB_Float Get(Func<int , int , ARGB_Float> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.A;
                arr[1]=px.R;
                arr[2]=px.G;
                arr[3]=px.B;
            } ,4,x,y);
            return new ARGB_Float() { A = (float)vs[0] , R = ( float ) vs[1] , G = ( float ) vs[2] , B = ( float ) vs[3] };
        }
        public static ARGB_Float Average(Func<int , int , ARGB_Float> getter , double x , double y , double w , double h)
        {
            var sex = x+w;
            var sey = y+w;
            var sx = (int)x;
            var sy = (int)y;

            double count=0;
            double acount=0;
            double sa=0,sr=0,sg=0,sb=0;
            for ( var i = sx; i < sex; i++ )
            {
                for ( var j = sy; j < sey; j++ )
                {
                    count++;
                    ARGB_Float source = getter(i,j);
                    acount += source.A;
                    sa += source.A;
                    sr += source.R;
                    sg += source.G;
                    sb += source.B;
                }
            }
            ARGB_Float destinationpx = new ARGB_Float
            {
                A = ( float ) ( sa / count )
            };
            if ( acount > 0 )
            {
                destinationpx.R = ( float ) ( sr / acount );
                destinationpx.G = ( float ) ( sg / acount );
                destinationpx.B = ( float ) ( sb / acount );
            }
            return destinationpx;
        }
        public static float Get(Func<int , int , float> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px;
            } ,1,x,y);
            return (float)vs[0];
        }
        public static float Average(Func<int , int , float> getter , double x , double y , double w , double h)
        {
            var sex = x+w;
            var sey = y+w;
            var sx = (int)x;
            var sy = (int)y;

            ulong count=0;
            double acount=0;
            for ( var i = sx; i < sex; i++ )
            {
                for ( var j = sy; j < sey; j++ )
                {
                    count++;
                    float source = getter(i,j);
                    acount += source;
                }
            }

            return ( float ) acount / count;
        }
        public static Pixel Get(Func<int , int , Pixel> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.A;
                arr[1]=px.R;
                arr[2]=px.G;
                arr[3]=px.B;
            } ,4,x,y);
            return Pixel.FromArgb(( byte ) vs[0] , ( byte ) vs[1] , ( byte ) vs[2] , ( byte ) vs[3]);
        }
        public static BGR Get(Func<int , int , BGR> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.R;
                arr[1]=px.G;
                arr[2]=px.B;
            } ,3,x,y);
            return new BGR { R = ( byte ) vs[0] , G = ( byte ) vs[1] , B = ( byte ) vs[2] };
        }
        public static RGB Get(Func<int , int , RGB> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.R;
                arr[1]=px.G;
                arr[2]=px.B;
            } ,3,x,y);
            return new RGB { R = ( byte ) vs[0] , G = ( byte ) vs[1] , B = ( byte ) vs[2] };
        }
        public static ABGR Get(Func<int , int , ABGR> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.A;
                arr[1]=px.R;
                arr[2]=px.G;
                arr[3]=px.B;
            } ,4,x,y);
            return new ABGR { A = ( byte ) vs[0] , R = ( byte ) vs[1] , G = ( byte ) vs[2] , B = ( byte ) vs[3] };
        }
        public static BGRA Get(Func<int , int , BGRA> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.A;
                arr[1]=px.R;
                arr[2]=px.G;
                arr[3]=px.B;
            } ,4,x,y);
            return new BGRA { A = ( byte ) vs[0] , R = ( byte ) vs[1] , G = ( byte ) vs[2] , B = ( byte ) vs[3] };
        }
        public static ARGB Get(Func<int , int , ARGB> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.A;
                arr[1]=px.R;
                arr[2]=px.G;
                arr[3]=px.B;
            } ,4,x,y);
            return new ARGB { A = ( byte ) vs[0] , R = ( byte ) vs[1] , G = ( byte ) vs[2] , B = ( byte ) vs[3] };
        }
        public static RGBA Get(Func<int , int , RGBA> getter , Size size , double x , double y)
        {
            double[] vs = BilinearInterpolator.Interpolate((xg,yg,arr)=>{
                var px = getter(xg,yg);
                arr[0]=px.A;
                arr[1]=px.R;
                arr[2]=px.G;
                arr[3]=px.B;
            } ,4,x,y);
            return new RGBA { A = ( byte ) vs[0] , R = ( byte ) vs[1] , G = ( byte ) vs[2] , B = ( byte ) vs[3] };
        }
        public static Pixel Average(Func<int , int , Pixel> getter , double x , double y , double w , double h)
        {
            var sex = x+w;
            var sey = y+w;
            var sx = (int)x;
            var sy = (int)y;

            ulong count=0;
            ulong acount=0;
            ulong sa=0,sr=0,sg=0,sb=0;
            for ( var i = sx; i < sex; i++ )
            {
                for ( var j = sy; j < sey; j++ )
                {
                    count++;
                    Pixel source = getter(i,j);
                    acount += source.A;
                    sa += source.A;
                    sr += source.R;
                    sg += source.G;
                    sb += source.B;
                }
            }
            Pixel destinationpx = new Pixel
            {
                A = ( byte ) ( sa / count )
            };
            if ( acount > 0 )
            {
                destinationpx.R = ( byte ) ( sr * 255 / acount );
                destinationpx.G = ( byte ) ( sg * 255 / acount );
                destinationpx.B = ( byte ) ( sb * 255 / acount );
            }
            return destinationpx;
        }
        public static bool Average(Func<int , int , bool> getter , double x , double y , double w , double h)
        {
            var sum=0;
            for ( var xo = 0; xo < w; xo++ )
                for ( var yo = 0; yo < h; yo++ )
                    sum += getter(xo + ( int ) x , yo + ( int ) y) ? 1 : 0;
            return sum > w * h / 2;
        }
        public static T Get<T>(Func<int , int , T> getter , Size size , double x , double y)
            where T : unmanaged
        {
            var converter1 = ColorConvert.GetConversionFrom<T,Pixel>();
            var converter2 = ColorConvert.GetConversionFrom<Pixel,T>();
            return converter2(Get((x2 , y2) => converter1(getter(x2 , y2)) , size , x , y));
        }
        public static T Average<T>(Func<int , int , T> getter , double x , double y , double w , double h)
            where T : unmanaged
        {
            var converter1 = ColorConvert.GetConversionFrom<T,Pixel>();
            var converter2 = ColorConvert.GetConversionFrom<Pixel,T>();

            return converter2(Average((x2 , y2) => converter1(getter(x2 , y2)) , x , y , w , h));
        }
    }
}
